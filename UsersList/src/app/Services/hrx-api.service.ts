//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
  providedIn: 'root',
})
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  /**
   * @param body (optional)
   * @return Created
   */
  aiChat(
    body: CreateMessageModel | undefined
  ): Observable<StringIdentifierModel> {
    let url_ = this.baseUrl + '/ChatMessages/AiChat';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processAiChat(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processAiChat(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringIdentifierModel>;
        })
      );
  }

  protected processAiChat(
    response: HttpResponseBase
  ): Observable<StringIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = StringIdentifierModel.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getChatHistory(sessionId: string): Observable<GetChatMessageHistoryModel[]> {
    let url_ = this.baseUrl + '/ChatMessages/GetChatHistory/{SessionId}';
    if (sessionId === undefined || sessionId === null)
      throw new Error("The parameter 'sessionId' must be defined.");
    url_ = url_.replace('{SessionId}', encodeURIComponent('' + sessionId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetChatHistory(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetChatHistory(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                GetChatMessageHistoryModel[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              GetChatMessageHistoryModel[]
            >;
        })
      );
  }

  protected processGetChatHistory(
    response: HttpResponseBase
  ): Observable<GetChatMessageHistoryModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(GetChatMessageHistoryModel.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('No Content', status, _responseText, _headers);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createSession(
    body: CreateChatSessionModel | undefined
  ): Observable<GuidIdentifierModel> {
    let url_ = this.baseUrl + '/ChatSessionApi/CreateSession';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateSession(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateSession(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GuidIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GuidIdentifierModel>;
        })
      );
  }

  protected processCreateSession(
    response: HttpResponseBase
  ): Observable<GuidIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = GuidIdentifierModel.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getSessions(userId: string): Observable<ChatSessionModel[]> {
    let url_ = this.baseUrl + '/ChatSessionApi/GetSessions/{UserId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{UserId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetSessions(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetSessions(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                ChatSessionModel[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              ChatSessionModel[]
            >;
        })
      );
  }

  protected processGetSessions(
    response: HttpResponseBase
  ): Observable<ChatSessionModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('No Content', status, _responseText, _headers);
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(ChatSessionModel.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  updateSessionTitle(
    sessionId: string,
    body: UpdateChatSessionTitleOModel | undefined
  ): Observable<StringIdentifierModel> {
    let url_ = this.baseUrl + '/ChatSessionApi/UpdateSessionTitle/{SessionId}';
    if (sessionId === undefined || sessionId === null)
      throw new Error("The parameter 'sessionId' must be defined.");
    url_ = url_.replace('{SessionId}', encodeURIComponent('' + sessionId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdateSessionTitle(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdateSessionTitle(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<StringIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<StringIdentifierModel>;
        })
      );
  }

  protected processUpdateSessionTitle(
    response: HttpResponseBase
  ): Observable<StringIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = StringIdentifierModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  updateSessionStatus(
    sessionid: string,
    body: UpdateChatSessionStatusModel | undefined
  ): Observable<void> {
    let url_ = this.baseUrl + '/ChatSessionApi/UpdateSessionStatus/{Sessionid}';
    if (sessionid === undefined || sessionid === null)
      throw new Error("The parameter 'sessionid' must be defined.");
    url_ = url_.replace('{Sessionid}', encodeURIComponent('' + sessionid));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
    };

    return this.http
      .request('put', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdateSessionStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdateSessionStatus(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processUpdateSessionStatus(
    response: HttpResponseBase
  ): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  deleteSession(sessionid: string): Observable<void> {
    let url_ = this.baseUrl + '/ChatSessionApi/DeleteSession/{sessionid}';
    if (sessionid === undefined || sessionid === null)
      throw new Error("The parameter 'sessionid' must be defined.");
    url_ = url_.replace('{sessionid}', encodeURIComponent('' + sessionid));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({}),
    };

    return this.http
      .request('delete', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processDeleteSession(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processDeleteSession(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<void>;
            }
          } else return _observableThrow(response_) as any as Observable<void>;
        })
      );
  }

  protected processDeleteSession(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return _observableOf(null as any);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getAllTickets(): Observable<HrGetAllTicketsModel[]> {
    let url_ = this.baseUrl + '/HrTicket/GetAllTickets';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllTickets(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllTickets(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                HrGetAllTicketsModel[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              HrGetAllTicketsModel[]
            >;
        })
      );
  }

  protected processGetAllTickets(
    response: HttpResponseBase
  ): Observable<HrGetAllTicketsModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(HrGetAllTicketsModel.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getByTicketId(ticketId: string): Observable<HrGetTicketByIdModel> {
    let url_ = this.baseUrl + '/HrTicket/GetByTicketId/{TicketId}';
    if (ticketId === undefined || ticketId === null)
      throw new Error("The parameter 'ticketId' must be defined.");
    url_ = url_.replace('{ticketId}', encodeURIComponent('' + ticketId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetByTicketId(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetByTicketId(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<HrGetTicketByIdModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HrGetTicketByIdModel>;
        })
      );
  }

  protected processGetByTicketId(
    response: HttpResponseBase
  ): Observable<HrGetTicketByIdModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = HrGetTicketByIdModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  postHrResponse(
    body: HrResponseModel | undefined
  ): Observable<HrResponseModel> {
    let url_ = this.baseUrl + '/HrTicket/PostHrResponse';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processPostHrResponse(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processPostHrResponse(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<HrResponseModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HrResponseModel>;
        })
      );
  }

  protected processPostHrResponse(
    response: HttpResponseBase
  ): Observable<HrResponseModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = HrResponseModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getByHrEmail(email: string): Observable<HrGetUserModel> {
    let url_ = this.baseUrl + '/HrUser/GetByHrEmail/{email}';
    if (email === undefined || email === null)
      throw new Error("The parameter 'email' must be defined.");
    url_ = url_.replace('{email}', encodeURIComponent('' + email));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetByHrEmail(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetByHrEmail(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<HrGetUserModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HrGetUserModel>;
        })
      );
  }

  protected processGetByHrEmail(
    response: HttpResponseBase
  ): Observable<HrGetUserModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = HrGetUserModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  createHr(body: HrCreateModel | undefined): Observable<HrGuidIdentifierModel> {
    let url_ = this.baseUrl + '/HrUser/CreateHr';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateHr(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateHr(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<HrGuidIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HrGuidIdentifierModel>;
        })
      );
  }

  protected processCreateHr(
    response: HttpResponseBase
  ): Observable<HrGuidIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = HrGuidIdentifierModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  updateHrStatus(
    hrId: string,
    body: HrStatusUpdateModel | undefined
  ): Observable<HrStatusResponseModel> {
    let url_ = this.baseUrl + '/HrUser/UpdateHrStatus/{hrId}';
    if (hrId === undefined || hrId === null)
      throw new Error("The parameter 'hrId' must be defined.");
    url_ = url_.replace('{hrId}', encodeURIComponent('' + hrId));
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('patch', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processUpdateHrStatus(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processUpdateHrStatus(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<HrStatusResponseModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<HrStatusResponseModel>;
        })
      );
  }

  protected processUpdateHrStatus(
    response: HttpResponseBase
  ): Observable<HrStatusResponseModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = HrStatusResponseModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createTicket(
    body: CreateTicketModel | undefined
  ): Observable<GuidIdentifierModel> {
    let url_ = this.baseUrl + '/TicketApi/CreateTicket';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateTicket(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateTicket(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GuidIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GuidIdentifierModel>;
        })
      );
  }

  protected processCreateTicket(
    response: HttpResponseBase
  ): Observable<GuidIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = GuidIdentifierModel.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getTickets(userId: string): Observable<GetTicketUserModel[]> {
    let url_ = this.baseUrl + '/TicketApi/GetTickets/{UserId}';
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace('{UserId}', encodeURIComponent('' + userId));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetTickets(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetTickets(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<
                GetTicketUserModel[]
              >;
            }
          } else
            return _observableThrow(response_) as any as Observable<
              GetTicketUserModel[]
            >;
        })
      );
  }

  protected processGetTickets(
    response: HttpResponseBase
  ): Observable<GetTicketUserModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
              result200!.push(GetTicketUserModel.fromJS(item));
          } else {
            result200 = <any>null;
          }
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @return OK
   */
  getUserByEmail(email: string): Observable<GetUserModel> {
    let url_ = this.baseUrl + '/UserApi/GetUser/{email}';
    if (email === undefined || email === null)
      throw new Error("The parameter 'email' must be defined.");
    url_ = url_.replace('{email}', encodeURIComponent('' + email));
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetUserByEmail(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetUserByEmail(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<GetUserModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GetUserModel>;
        })
      );
  }

  protected processGetUserByEmail(
    response: HttpResponseBase
  ): Observable<GetUserModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result404: any = null;
          let resultData404 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result404 = ProblemDetails.fromJS(resultData404);
          return throwException(
            'Not Found',
            status,
            _responseText,
            _headers,
            result404
          );
        })
      );
    } else if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = GetUserModel.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  createUser(
    body: CreateUserModel | undefined
  ): Observable<GuidIdentifierModel> {
    let url_ = this.baseUrl + '/UserApi/CreateUser';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'text/plain',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processCreateUser(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processCreateUser(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<GuidIdentifierModel>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<GuidIdentifierModel>;
        })
      );
  }

  protected processCreateUser(
    response: HttpResponseBase
  ): Observable<GuidIdentifierModel> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 201) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result201: any = null;
          let resultData201 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result201 = GuidIdentifierModel.fromJS(resultData201);
          return _observableOf(result201);
        })
      );
    } else if (status === 409) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result409: any = null;
          let resultData409 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result409 = ProblemDetails.fromJS(resultData409);
          return throwException(
            'Conflict',
            status,
            _responseText,
            _headers,
            result409
          );
        })
      );
    } else if (status === 400) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result400: any = null;
          let resultData400 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result400 = ProblemDetails.fromJS(resultData400);
          return throwException(
            'Bad Request',
            status,
            _responseText,
            _headers,
            result400
          );
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class ChatSessionModel implements IChatSessionModel {
  session_id?: string;
  user_id?: string;
  title?: string | undefined;
  created_at?: Date;
  status?: ChatSessionStatus;

  constructor(data?: IChatSessionModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.session_id = _data['session_id'];
      this.user_id = _data['user_id'];
      this.title = _data['title'];
      this.created_at = _data['created_at']
        ? new Date(_data['created_at'].toString())
        : <any>undefined;
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): ChatSessionModel {
    data = typeof data === 'object' ? data : {};
    let result = new ChatSessionModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['session_id'] = this.session_id;
    data['user_id'] = this.user_id;
    data['title'] = this.title;
    data['created_at'] = this.created_at
      ? this.created_at.toISOString()
      : <any>undefined;
    data['status'] = this.status;
    return data;
  }
}

export interface IChatSessionModel {
  session_id?: string;
  user_id?: string;
  title?: string | undefined;
  created_at?: Date;
  status?: ChatSessionStatus;
}

export enum ChatSessionStatus {
  Active = 'Active',
  Inactive = 'Inactive',
}

export class CreateChatSessionModel implements ICreateChatSessionModel {
  user_id?: string;

  constructor(data?: ICreateChatSessionModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user_id = _data['user_id'];
    }
  }

  static fromJS(data: any): CreateChatSessionModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateChatSessionModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user_id'] = this.user_id;
    return data;
  }
}

export interface ICreateChatSessionModel {
  user_id?: string;
}

export class CreateMessageModel implements ICreateMessageModel {
  session_id?: string;
  user_Text?: string | undefined;

  constructor(data?: ICreateMessageModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.session_id = _data['session_id'];
      this.user_Text = _data['user_Text'];
    }
  }

  static fromJS(data: any): CreateMessageModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateMessageModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['session_id'] = this.session_id;
    data['user_Text'] = this.user_Text;
    return data;
  }
}

export interface ICreateMessageModel {
  session_id?: string;
  user_Text?: string | undefined;
}

export class CreateTicketModel implements ICreateTicketModel {
  user_id?: string;
  user_Query_Title?: string | undefined;
  user_Query_Description?: string | undefined;

  constructor(data?: ICreateTicketModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user_id = _data['user_id'];
      this.user_Query_Title = _data['user_Query_Title'];
      this.user_Query_Description = _data['user_Query_Description'];
    }
  }

  static fromJS(data: any): CreateTicketModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateTicketModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user_id'] = this.user_id;
    data['user_Query_Title'] = this.user_Query_Title;
    data['user_Query_Description'] = this.user_Query_Description;
    return data;
  }
}

export interface ICreateTicketModel {
  user_id?: string;
  user_Query_Title?: string | undefined;
  user_Query_Description?: string | undefined;
}

export class CreateUserModel implements ICreateUserModel {
  user_name?: string | undefined;
  user_email?: string | undefined;

  constructor(data?: ICreateUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user_name = _data['user_name'];
      this.user_email = _data['user_email'];
    }
  }

  static fromJS(data: any): CreateUserModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user_name'] = this.user_name;
    data['user_email'] = this.user_email;
    return data;
  }
}

export interface ICreateUserModel {
  user_name?: string | undefined;
  user_email?: string | undefined;
}

export class GetChatMessageHistoryModel implements IGetChatMessageHistoryModel {
  session_id?: string;
  user_Text?: string | undefined;
  ai_Text?: string | undefined;
  created_at?: Date;

  constructor(data?: IGetChatMessageHistoryModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.session_id = _data['session_id'];
      this.user_Text = _data['user_Text'];
      this.ai_Text = _data['ai_Text'];
      this.created_at = _data['created_at']
        ? new Date(_data['created_at'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetChatMessageHistoryModel {
    data = typeof data === 'object' ? data : {};
    let result = new GetChatMessageHistoryModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['session_id'] = this.session_id;
    data['user_Text'] = this.user_Text;
    data['ai_Text'] = this.ai_Text;
    data['created_at'] = this.created_at
      ? this.created_at.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IGetChatMessageHistoryModel {
  session_id?: string;
  user_Text?: string | undefined;
  ai_Text?: string | undefined;
  created_at?: Date;
}

export class GetTicketUserModel implements IGetTicketUserModel {
  ticket_id?: string;
  user_id?: string;
  user_Query_Title?: string | undefined;
  user_Query_Description?: string | undefined;
  hr_id?: string | undefined;
  hr_Comment?: string | undefined;
  status?: TicketsStatus;

  constructor(data?: IGetTicketUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ticket_id = _data['ticket_id'];
      this.user_id = _data['user_id'];
      this.user_Query_Title = _data['user_Query_Title'];
      this.user_Query_Description = _data['user_Query_Description'];
      this.hr_id = _data['hr_id'];
      this.hr_Comment = _data['hr_Comment'];
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): GetTicketUserModel {
    data = typeof data === 'object' ? data : {};
    let result = new GetTicketUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ticket_id'] = this.ticket_id;
    data['user_id'] = this.user_id;
    data['user_Query_Title'] = this.user_Query_Title;
    data['user_Query_Description'] = this.user_Query_Description;
    data['hr_id'] = this.hr_id;
    data['hr_Comment'] = this.hr_Comment;
    data['status'] = this.status;
    return data;
  }
}

export interface IGetTicketUserModel {
  ticket_id?: string;
  user_id?: string;
  user_Query_Title?: string | undefined;
  user_Query_Description?: string | undefined;
  hr_id?: string | undefined;
  hr_Comment?: string | undefined;
  status?: TicketsStatus;
}

export class GetUserModel implements IGetUserModel {
  user_id?: string;
  user_name?: string | undefined;
  user_email?: string | undefined;
  created_at?: Date;

  constructor(data?: IGetUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.user_id = _data['user_id'];
      this.user_name = _data['user_name'];
      this.user_email = _data['user_email'];
      this.created_at = _data['created_at']
        ? new Date(_data['created_at'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): GetUserModel {
    data = typeof data === 'object' ? data : {};
    let result = new GetUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['user_id'] = this.user_id;
    data['user_name'] = this.user_name;
    data['user_email'] = this.user_email;
    data['created_at'] = this.created_at
      ? this.created_at.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IGetUserModel {
  user_id?: string;
  user_name?: string | undefined;
  user_email?: string | undefined;
  created_at?: Date;
}

export class GuidIdentifierModel implements IGuidIdentifierModel {
  id?: string;

  constructor(data?: IGuidIdentifierModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data['id'];
    }
  }

  static fromJS(data: any): GuidIdentifierModel {
    data = typeof data === 'object' ? data : {};
    let result = new GuidIdentifierModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['id'] = this.id;
    return data;
  }
}

export interface IGuidIdentifierModel {
  id?: string;
}

export class HrCreateModel implements IHrCreateModel {
  hr_name!: string | undefined;
  email!: string | undefined;

  constructor(data?: IHrCreateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hr_name = _data['hr_name'];
      this.email = _data['email'];
    }
  }

  static fromJS(data: any): HrCreateModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrCreateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['hr_name'] = this.hr_name;
    data['email'] = this.email;
    return data;
  }
}

export interface IHrCreateModel {
  hr_name: string | undefined;
  email: string | undefined;
}

export class HrGetAllTicketsModel implements IHrGetAllTicketsModel {
  ticket_id?: string;
  user_id!: string;
  user_name!: string | undefined;
  user_Query_Title!: string | undefined;
  user_Query_Description!: string | undefined;
  hr_id?: string | undefined;
  hr_Comment?: string | undefined;
  status?: TicketsStatus;
  created_at?: Date;
  resolved_at?: Date | undefined;

  constructor(data?: IHrGetAllTicketsModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ticket_id = _data['ticket_id'];
      this.user_id = _data['user_id'];
      this.user_name = _data['user_name'];
      this.user_Query_Title = _data['user_Query_Title'];
      this.user_Query_Description = _data['user_Query_Description'];
      this.hr_id = _data['hr_id'];
      this.hr_Comment = _data['hr_Comment'];
      this.status = _data['status'];
      this.created_at = _data['created_at']
        ? new Date(_data['created_at'].toString())
        : <any>undefined;
      this.resolved_at = _data['resolved_at']
        ? new Date(_data['resolved_at'].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): HrGetAllTicketsModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrGetAllTicketsModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ticket_id'] = this.ticket_id;
    data['user_id'] = this.user_id;
    data['user_name'] = this.user_name;
    data['user_Query_Title'] = this.user_Query_Title;
    data['user_Query_Description'] = this.user_Query_Description;
    data['hr_id'] = this.hr_id;
    data['hr_Comment'] = this.hr_Comment;
    data['status'] = this.status;
    data['created_at'] = this.created_at
      ? this.created_at.toISOString()
      : <any>undefined;
    data['resolved_at'] = this.resolved_at
      ? this.resolved_at.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface IHrGetAllTicketsModel {
  ticket_id?: string;
  user_id: string;
  user_name: string | undefined;
  user_Query_Title: string | undefined;
  user_Query_Description: string | undefined;
  hr_id?: string | undefined;
  hr_Comment?: string | undefined;
  status?: TicketsStatus;
  created_at?: Date;
  resolved_at?: Date | undefined;
}

export class HrGetTicketByIdModel implements IHrGetTicketByIdModel {
  ticket_id?: string;
  user_name?: string | undefined;
  user_Query_Title!: string | undefined;
  user_Query_Description!: string | undefined;

  constructor(data?: IHrGetTicketByIdModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ticket_id = _data['ticket_id'];
      this.user_name = _data['user_name'];
      this.user_Query_Title = _data['user_Query_Title'];
      this.user_Query_Description = _data['user_Query_Description'];
    }
  }

  static fromJS(data: any): HrGetTicketByIdModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrGetTicketByIdModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ticket_id'] = this.ticket_id;
    data['user_name'] = this.user_name;
    data['user_Query_Title'] = this.user_Query_Title;
    data['user_Query_Description'] = this.user_Query_Description;
    return data;
  }
}

export interface IHrGetTicketByIdModel {
  ticket_id?: string;
  user_name?: string | undefined;
  user_Query_Title: string | undefined;
  user_Query_Description: string | undefined;
}

export class HrGetUserModel implements IHrGetUserModel {
  hr_id?: string;
  hr_name!: string | undefined;
  email!: string | undefined;
  status?: HrStatus;

  constructor(data?: IHrGetUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hr_id = _data['hr_id'];
      this.hr_name = _data['hr_name'];
      this.email = _data['email'];
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): HrGetUserModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrGetUserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['hr_id'] = this.hr_id;
    data['hr_name'] = this.hr_name;
    data['email'] = this.email;
    data['status'] = this.status;
    return data;
  }
}

export interface IHrGetUserModel {
  hr_id?: string;
  hr_name: string | undefined;
  email: string | undefined;
  status?: HrStatus;
}

export class HrGuidIdentifierModel implements IHrGuidIdentifierModel {
  hr_id?: string;

  constructor(data?: IHrGuidIdentifierModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.hr_id = _data['hr_id'];
    }
  }

  static fromJS(data: any): HrGuidIdentifierModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrGuidIdentifierModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['hr_id'] = this.hr_id;
    return data;
  }
}

export interface IHrGuidIdentifierModel {
  hr_id?: string;
}

export class HrResponseModel implements IHrResponseModel {
  ticket_id?: string;
  hr_id?: string;
  hr_Comment!: string | undefined;

  constructor(data?: IHrResponseModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.ticket_id = _data['ticket_id'];
      this.hr_id = _data['hr_id'];
      this.hr_Comment = _data['hr_Comment'];
    }
  }

  static fromJS(data: any): HrResponseModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrResponseModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['ticket_id'] = this.ticket_id;
    data['hr_id'] = this.hr_id;
    data['hr_Comment'] = this.hr_Comment;
    return data;
  }
}

export interface IHrResponseModel {
  ticket_id?: string;
  hr_id?: string;
  hr_Comment: string | undefined;
}

export enum HrStatus {
  Active = 'Active',
  Inactive = 'Inactive',
}

export class HrStatusResponseModel implements IHrStatusResponseModel {
  status?: HrStatus;

  constructor(data?: IHrStatusResponseModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): HrStatusResponseModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrStatusResponseModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['status'] = this.status;
    return data;
  }
}

export interface IHrStatusResponseModel {
  status?: HrStatus;
}

export class HrStatusUpdateModel implements IHrStatusUpdateModel {
  status?: HrStatus;

  constructor(data?: IHrStatusUpdateModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): HrStatusUpdateModel {
    data = typeof data === 'object' ? data : {};
    let result = new HrStatusUpdateModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['status'] = this.status;
    return data;
  }
}

export interface IHrStatusUpdateModel {
  status?: HrStatus;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data['type'];
      this.title = _data['title'];
      this.status = _data['status'];
      this.detail = _data['detail'];
      this.instance = _data['instance'];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === 'object' ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data['type'] = this.type;
    data['title'] = this.title;
    data['status'] = this.status;
    data['detail'] = this.detail;
    data['instance'] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class StringIdentifierModel implements IStringIdentifierModel {
  text?: string | undefined;

  constructor(data?: IStringIdentifierModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.text = _data['text'];
    }
  }

  static fromJS(data: any): StringIdentifierModel {
    data = typeof data === 'object' ? data : {};
    let result = new StringIdentifierModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['text'] = this.text;
    return data;
  }
}

export interface IStringIdentifierModel {
  text?: string | undefined;
}

export enum TicketsStatus {
  Open = 'Open',
  Resolved = 'Resolved',
}

export class UpdateChatSessionStatusModel
  implements IUpdateChatSessionStatusModel
{
  status?: ChatSessionStatus;

  constructor(data?: IUpdateChatSessionStatusModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.status = _data['status'];
    }
  }

  static fromJS(data: any): UpdateChatSessionStatusModel {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateChatSessionStatusModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['status'] = this.status;
    return data;
  }
}

export interface IUpdateChatSessionStatusModel {
  status?: ChatSessionStatus;
}

export class UpdateChatSessionTitleOModel
  implements IUpdateChatSessionTitleOModel
{
  title?: string | undefined;

  constructor(data?: IUpdateChatSessionTitleOModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data['title'];
    }
  }

  static fromJS(data: any): UpdateChatSessionTitleOModel {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateChatSessionTitleOModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['title'] = this.title;
    return data;
  }
}

export interface IUpdateChatSessionTitleOModel {
  title?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else
    return _observableThrow(
      new ApiException(message, status, response, headers, null)
    );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}